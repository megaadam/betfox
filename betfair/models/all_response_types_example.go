// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AllResponseTypesExample all response types example
//
// swagger:model AllResponseTypesExample
type AllResponseTypesExample struct {

	// connection
	Connection *ConnectionMessage `json:"connection,omitempty"`

	// market change message
	MarketChangeMessage *MarketChangeMessage `json:"marketChangeMessage,omitempty"`

	// op types
	// Enum: [connection status mcm ocm]
	OpTypes string `json:"opTypes,omitempty"`

	// order change message
	OrderChangeMessage *OrderChangeMessage `json:"orderChangeMessage,omitempty"`

	// status
	Status *StatusMessage `json:"status,omitempty"`
}

// Validate validates this all response types example
func (m *AllResponseTypesExample) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketChangeMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderChangeMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllResponseTypesExample) validateConnection(formats strfmt.Registry) error {
	if swag.IsZero(m.Connection) { // not required
		return nil
	}

	if m.Connection != nil {
		if err := m.Connection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *AllResponseTypesExample) validateMarketChangeMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketChangeMessage) { // not required
		return nil
	}

	if m.MarketChangeMessage != nil {
		if err := m.MarketChangeMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketChangeMessage")
			}
			return err
		}
	}

	return nil
}

var allResponseTypesExampleTypeOpTypesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connection","status","mcm","ocm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		allResponseTypesExampleTypeOpTypesPropEnum = append(allResponseTypesExampleTypeOpTypesPropEnum, v)
	}
}

const (

	// AllResponseTypesExampleOpTypesConnection captures enum value "connection"
	AllResponseTypesExampleOpTypesConnection string = "connection"

	// AllResponseTypesExampleOpTypesStatus captures enum value "status"
	AllResponseTypesExampleOpTypesStatus string = "status"

	// AllResponseTypesExampleOpTypesMcm captures enum value "mcm"
	AllResponseTypesExampleOpTypesMcm string = "mcm"

	// AllResponseTypesExampleOpTypesOcm captures enum value "ocm"
	AllResponseTypesExampleOpTypesOcm string = "ocm"
)

// prop value enum
func (m *AllResponseTypesExample) validateOpTypesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, allResponseTypesExampleTypeOpTypesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AllResponseTypesExample) validateOpTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.OpTypes) { // not required
		return nil
	}

	// value enum
	if err := m.validateOpTypesEnum("opTypes", "body", m.OpTypes); err != nil {
		return err
	}

	return nil
}

func (m *AllResponseTypesExample) validateOrderChangeMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderChangeMessage) { // not required
		return nil
	}

	if m.OrderChangeMessage != nil {
		if err := m.OrderChangeMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderChangeMessage")
			}
			return err
		}
	}

	return nil
}

func (m *AllResponseTypesExample) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this all response types example based on the context it is used
func (m *AllResponseTypesExample) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketChangeMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderChangeMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllResponseTypesExample) contextValidateConnection(ctx context.Context, formats strfmt.Registry) error {

	if m.Connection != nil {
		if err := m.Connection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *AllResponseTypesExample) contextValidateMarketChangeMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketChangeMessage != nil {
		if err := m.MarketChangeMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketChangeMessage")
			}
			return err
		}
	}

	return nil
}

func (m *AllResponseTypesExample) contextValidateOrderChangeMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderChangeMessage != nil {
		if err := m.OrderChangeMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderChangeMessage")
			}
			return err
		}
	}

	return nil
}

func (m *AllResponseTypesExample) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllResponseTypesExample) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllResponseTypesExample) UnmarshalBinary(b []byte) error {
	var res AllResponseTypesExample
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
