// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderSubscriptionMessage order subscription message
//
// swagger:model OrderSubscriptionMessage
type OrderSubscriptionMessage struct {
	idField int32

	// Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
	Clk string `json:"clk,omitempty"`

	// Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
	ConflateMs int64 `json:"conflateMs,omitempty"`

	// Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
	HeartbeatMs int64 `json:"heartbeatMs,omitempty"`

	// Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
	InitialClk string `json:"initialClk,omitempty"`

	// Optional filter applied to order subscription
	OrderFilter *OrderFilter `json:"orderFilter,omitempty"`

	// Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
	SegmentationEnabled bool `json:"segmentationEnabled,omitempty"`
}

// ID gets the id of this subtype
func (m *OrderSubscriptionMessage) ID() int32 {
	return m.idField
}

// SetID sets the id of this subtype
func (m *OrderSubscriptionMessage) SetID(val int32) {
	m.idField = val
}

// Op gets the op of this subtype
func (m *OrderSubscriptionMessage) Op() string {
	return "OrderSubscriptionMessage"
}

// SetOp sets the op of this subtype
func (m *OrderSubscriptionMessage) SetOp(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OrderSubscriptionMessage) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
		Clk string `json:"clk,omitempty"`

		// Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
		ConflateMs int64 `json:"conflateMs,omitempty"`

		// Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
		HeartbeatMs int64 `json:"heartbeatMs,omitempty"`

		// Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
		InitialClk string `json:"initialClk,omitempty"`

		// Optional filter applied to order subscription
		OrderFilter *OrderFilter `json:"orderFilter,omitempty"`

		// Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
		SegmentationEnabled bool `json:"segmentationEnabled,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID int32 `json:"id,omitempty"`

		Op string `json:"op,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result OrderSubscriptionMessage

	result.idField = base.ID

	if base.Op != result.Op() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid op value: %q", base.Op)
	}

	result.Clk = data.Clk
	result.ConflateMs = data.ConflateMs
	result.HeartbeatMs = data.HeartbeatMs
	result.InitialClk = data.InitialClk
	result.OrderFilter = data.OrderFilter
	result.SegmentationEnabled = data.SegmentationEnabled

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OrderSubscriptionMessage) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
		Clk string `json:"clk,omitempty"`

		// Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
		ConflateMs int64 `json:"conflateMs,omitempty"`

		// Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
		HeartbeatMs int64 `json:"heartbeatMs,omitempty"`

		// Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
		InitialClk string `json:"initialClk,omitempty"`

		// Optional filter applied to order subscription
		OrderFilter *OrderFilter `json:"orderFilter,omitempty"`

		// Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
		SegmentationEnabled bool `json:"segmentationEnabled,omitempty"`
	}{

		Clk: m.Clk,

		ConflateMs: m.ConflateMs,

		HeartbeatMs: m.HeartbeatMs,

		InitialClk: m.InitialClk,

		OrderFilter: m.OrderFilter,

		SegmentationEnabled: m.SegmentationEnabled,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID int32 `json:"id,omitempty"`

		Op string `json:"op,omitempty"`
	}{

		ID: m.ID(),

		Op: m.Op(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this order subscription message
func (m *OrderSubscriptionMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderSubscriptionMessage) validateOrderFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderFilter) { // not required
		return nil
	}

	if m.OrderFilter != nil {
		if err := m.OrderFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderFilter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order subscription message based on the context it is used
func (m *OrderSubscriptionMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderSubscriptionMessage) contextValidateOrderFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderFilter != nil {
		if err := m.OrderFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderSubscriptionMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderSubscriptionMessage) UnmarshalBinary(b []byte) error {
	var res OrderSubscriptionMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
