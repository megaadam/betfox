// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthenticationMessage authentication message
//
// swagger:model AuthenticationMessage
type AuthenticationMessage struct {
	idField int32

	// app key
	AppKey string `json:"appKey,omitempty"`

	// session
	Session string `json:"session,omitempty"`
}

// ID gets the id of this subtype
func (m *AuthenticationMessage) ID() int32 {
	return m.idField
}

// SetID sets the id of this subtype
func (m *AuthenticationMessage) SetID(val int32) {
	m.idField = val
}

// Op gets the op of this subtype
func (m *AuthenticationMessage) Op() string {
	return "AuthenticationMessage"
}

// SetOp sets the op of this subtype
func (m *AuthenticationMessage) SetOp(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AuthenticationMessage) UnmarshalJSON(raw []byte) error {
	var data struct {

		// app key
		AppKey string `json:"appKey,omitempty"`

		// session
		Session string `json:"session,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID int32 `json:"id,omitempty"`

		Op string `json:"op,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AuthenticationMessage

	result.idField = base.ID

	if base.Op != result.Op() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid op value: %q", base.Op)
	}

	result.AppKey = data.AppKey
	result.Session = data.Session

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AuthenticationMessage) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// app key
		AppKey string `json:"appKey,omitempty"`

		// session
		Session string `json:"session,omitempty"`
	}{

		AppKey: m.AppKey,

		Session: m.Session,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID int32 `json:"id,omitempty"`

		Op string `json:"op,omitempty"`
	}{

		ID: m.ID(),

		Op: m.Op(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this authentication message
func (m *AuthenticationMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this authentication message based on the context it is used
func (m *AuthenticationMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticationMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticationMessage) UnmarshalBinary(b []byte) error {
	var res AuthenticationMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
