// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AllRequestTypesExample all request types example
//
// swagger:model AllRequestTypesExample
type AllRequestTypesExample struct {

	// authentication
	Authentication *AuthenticationMessage `json:"authentication,omitempty"`

	// heartbeat
	Heartbeat *HeartbeatMessage `json:"heartbeat,omitempty"`

	// market subscription
	MarketSubscription *MarketSubscriptionMessage `json:"marketSubscription,omitempty"`

	// op types
	// Enum: [heartbeat authentication marketSubscription orderSubscription]
	OpTypes string `json:"opTypes,omitempty"`

	// order subscription message
	OrderSubscriptionMessage *OrderSubscriptionMessage `json:"orderSubscriptionMessage,omitempty"`
}

// Validate validates this all request types example
func (m *AllRequestTypesExample) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeartbeat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderSubscriptionMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllRequestTypesExample) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	if m.Authentication != nil {
		if err := m.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *AllRequestTypesExample) validateHeartbeat(formats strfmt.Registry) error {
	if swag.IsZero(m.Heartbeat) { // not required
		return nil
	}

	if m.Heartbeat != nil {
		if err := m.Heartbeat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("heartbeat")
			}
			return err
		}
	}

	return nil
}

func (m *AllRequestTypesExample) validateMarketSubscription(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketSubscription) { // not required
		return nil
	}

	if m.MarketSubscription != nil {
		if err := m.MarketSubscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketSubscription")
			}
			return err
		}
	}

	return nil
}

var allRequestTypesExampleTypeOpTypesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["heartbeat","authentication","marketSubscription","orderSubscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		allRequestTypesExampleTypeOpTypesPropEnum = append(allRequestTypesExampleTypeOpTypesPropEnum, v)
	}
}

const (

	// AllRequestTypesExampleOpTypesHeartbeat captures enum value "heartbeat"
	AllRequestTypesExampleOpTypesHeartbeat string = "heartbeat"

	// AllRequestTypesExampleOpTypesAuthentication captures enum value "authentication"
	AllRequestTypesExampleOpTypesAuthentication string = "authentication"

	// AllRequestTypesExampleOpTypesMarketSubscription captures enum value "marketSubscription"
	AllRequestTypesExampleOpTypesMarketSubscription string = "marketSubscription"

	// AllRequestTypesExampleOpTypesOrderSubscription captures enum value "orderSubscription"
	AllRequestTypesExampleOpTypesOrderSubscription string = "orderSubscription"
)

// prop value enum
func (m *AllRequestTypesExample) validateOpTypesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, allRequestTypesExampleTypeOpTypesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AllRequestTypesExample) validateOpTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.OpTypes) { // not required
		return nil
	}

	// value enum
	if err := m.validateOpTypesEnum("opTypes", "body", m.OpTypes); err != nil {
		return err
	}

	return nil
}

func (m *AllRequestTypesExample) validateOrderSubscriptionMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderSubscriptionMessage) { // not required
		return nil
	}

	if m.OrderSubscriptionMessage != nil {
		if err := m.OrderSubscriptionMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderSubscriptionMessage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this all request types example based on the context it is used
func (m *AllRequestTypesExample) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeartbeat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderSubscriptionMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllRequestTypesExample) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.Authentication != nil {
		if err := m.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *AllRequestTypesExample) contextValidateHeartbeat(ctx context.Context, formats strfmt.Registry) error {

	if m.Heartbeat != nil {
		if err := m.Heartbeat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("heartbeat")
			}
			return err
		}
	}

	return nil
}

func (m *AllRequestTypesExample) contextValidateMarketSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketSubscription != nil {
		if err := m.MarketSubscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketSubscription")
			}
			return err
		}
	}

	return nil
}

func (m *AllRequestTypesExample) contextValidateOrderSubscriptionMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderSubscriptionMessage != nil {
		if err := m.OrderSubscriptionMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderSubscriptionMessage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllRequestTypesExample) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllRequestTypesExample) UnmarshalBinary(b []byte) error {
	var res AllRequestTypesExample
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
