// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MarketChange market change
//
// swagger:model MarketChange
type MarketChange struct {

	// Conflated - have more than a single change been combined (or null if not conflated)
	Con bool `json:"con,omitempty"`

	// Market Id - the id of the market
	ID string `json:"id,omitempty"`

	// Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)
	Img bool `json:"img,omitempty"`

	// Market Definition - the definition of the market (or null if un-changed)
	MarketDefinition *MarketDefinition `json:"marketDefinition,omitempty"`

	// Runner Changes - a list of changes to runners (or null if un-changed)
	Rc []*RunnerChange `json:"rc"`

	// The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)
	Tv float64 `json:"tv,omitempty"`
}

// Validate validates this market change
func (m *MarketChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketChange) validateMarketDefinition(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketDefinition) { // not required
		return nil
	}

	if m.MarketDefinition != nil {
		if err := m.MarketDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *MarketChange) validateRc(formats strfmt.Registry) error {
	if swag.IsZero(m.Rc) { // not required
		return nil
	}

	for i := 0; i < len(m.Rc); i++ {
		if swag.IsZero(m.Rc[i]) { // not required
			continue
		}

		if m.Rc[i] != nil {
			if err := m.Rc[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this market change based on the context it is used
func (m *MarketChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarketDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketChange) contextValidateMarketDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketDefinition != nil {
		if err := m.MarketDefinition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *MarketChange) contextValidateRc(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rc); i++ {

		if m.Rc[i] != nil {
			if err := m.Rc[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketChange) UnmarshalBinary(b []byte) error {
	var res MarketChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
