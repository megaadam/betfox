// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunnerDefinition runner definition
//
// swagger:model RunnerDefinition
type RunnerDefinition struct {

	// adjustment factor
	AdjustmentFactor float64 `json:"adjustmentFactor,omitempty"`

	// bsp
	Bsp float64 `json:"bsp,omitempty"`

	// Handicap - the handicap of the runner (selection) (null if not applicable)
	Hc float64 `json:"hc,omitempty"`

	// Selection Id - the id of the runner (selection)
	ID int64 `json:"id,omitempty"`

	// removal date
	// Format: date-time
	RemovalDate strfmt.DateTime `json:"removalDate,omitempty"`

	// sort priority
	SortPriority int32 `json:"sortPriority,omitempty"`

	// status
	// Enum: [ACTIVE WINNER LOSER REMOVED REMOVED_VACANT HIDDEN PLACED]
	Status string `json:"status,omitempty"`
}

// Validate validates this runner definition
func (m *RunnerDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemovalDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunnerDefinition) validateRemovalDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("removalDate", "body", "date-time", m.RemovalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var runnerDefinitionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","WINNER","LOSER","REMOVED","REMOVED_VACANT","HIDDEN","PLACED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runnerDefinitionTypeStatusPropEnum = append(runnerDefinitionTypeStatusPropEnum, v)
	}
}

const (

	// RunnerDefinitionStatusACTIVE captures enum value "ACTIVE"
	RunnerDefinitionStatusACTIVE string = "ACTIVE"

	// RunnerDefinitionStatusWINNER captures enum value "WINNER"
	RunnerDefinitionStatusWINNER string = "WINNER"

	// RunnerDefinitionStatusLOSER captures enum value "LOSER"
	RunnerDefinitionStatusLOSER string = "LOSER"

	// RunnerDefinitionStatusREMOVED captures enum value "REMOVED"
	RunnerDefinitionStatusREMOVED string = "REMOVED"

	// RunnerDefinitionStatusREMOVEDVACANT captures enum value "REMOVED_VACANT"
	RunnerDefinitionStatusREMOVEDVACANT string = "REMOVED_VACANT"

	// RunnerDefinitionStatusHIDDEN captures enum value "HIDDEN"
	RunnerDefinitionStatusHIDDEN string = "HIDDEN"

	// RunnerDefinitionStatusPLACED captures enum value "PLACED"
	RunnerDefinitionStatusPLACED string = "PLACED"
)

// prop value enum
func (m *RunnerDefinition) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runnerDefinitionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunnerDefinition) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this runner definition based on context it is used
func (m *RunnerDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RunnerDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunnerDefinition) UnmarshalBinary(b []byte) error {
	var res RunnerDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
